{"meta":{"title":"Road of web","subtitle":"极客笔记","description":"一只web鼠的个人笔记","author":"Zhang rui","url":"https://ukhack.github.io"},"pages":[{"title":"","date":"2016-10-15T12:08:34.035Z","updated":"2016-10-15T12:08:34.035Z","comments":false,"path":"tags/index.html","permalink":"https://ukhack.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue.js 手札（一）","slug":"Vue-1","date":"2016-11-10T16:00:00.000Z","updated":"2016-11-16T04:05:24.752Z","comments":true,"path":"2016/11/11/Vue-1/","link":"","permalink":"https://ukhack.github.io/2016/11/11/Vue-1/","excerpt":"","text":"","categories":[],"tags":[{"name":"编程学习","slug":"编程学习","permalink":"https://ukhack.github.io/tags/编程学习/"},{"name":"Vue","slug":"Vue","permalink":"https://ukhack.github.io/tags/Vue/"}],"keywords":[]},{"title":"RESTful 手札（一）","slug":"2016-10-17-RESTful-1","date":"2016-10-16T16:00:00.000Z","updated":"2016-10-18T11:53:15.428Z","comments":true,"path":"2016/10/17/2016-10-17-RESTful-1/","link":"","permalink":"https://ukhack.github.io/2016/10/17/2016-10-17-RESTful-1/","excerpt":"","text":"RESTful 学习手记（一）2016-10-17 周一在如今前后端分离的大潮流下，诞生了各种 API 框架。其中最火发展最成熟的 RESTful API 设计思想也催生了很多新潮的 API 框架。 REST APIs are a very common topic nowaday; they are part of almost every web application. A simple, consistent and pragmatic interface is a mandatory thing; it will be much easier for others to use your API. Even if these practices may look common to your eye, I often see people that don’t really respect them. That’s why I decided to write a post about it. bourgeois 协议HTTP/HTTPS 域名提倡专用二级域名如下： 1https://api.domains.com 如果项目较小，也可以考虑如下方式 1https://www.domains.com/api/something 这两种方式都是合理的，可在实际项目中酌情选择 API 版本api 版本号应该显式的约定在在 url 中 12https://api.domains.com/v1https://domains.com/api/v1/ Github 的 api 隐藏在接收到的 http head 信息中。 使用版本号可以让你在更新 api 时避免破坏旧版本的 api 路径Endpoint 应该是复数名词而不是动词。在 RESTful 中，一个网址即对应一个资源。 形如： 123https://api.domains.com/v1/soapshttps://api.domains.com/v1/gayshttps://api.domains.com/v1/programmers 是合理的。 而形如： 123https://api.domains.com/v1/pickSoapshttps://api.domains.com/v1/becomeGayhttps://api.domains.com/v1/getProgrammers 这种传统的 get\\set 或者包含其他动词的 Endpoint 应该避免。 那么我们该怎么实现资源的 CRUD 呢？ 动词RESTful API 核心的设计思想就是通过 HTTP 协议原生的传输方法执行 CRUD 常用的 HTTP 动词如下： 12345GET (SELECT) : 从服务器获取资源。POST (CREATE) : 在服务器新建一个资源PUT (UPDATE) : 在服务器更新一个资源（修改后的完整资源）PATCH (UPDATE) : 在服务器更新一个资源（修改的某一项属性）DELETE (DELETE) : 在服务器删除资源 不常用：12HEAD ：获取资源的元数据,如数据的哈希值或最后的更新。OPTIONS ：获取客户端能对资源做什么操作的信息。 例如：123456GET /soaps : 列出所有的肥皂品牌GET /soaps/ID :列出指定品牌的肥皂POST /soaps : 新建一个肥皂品牌PUT /soaps/ID : 更改某个指定的肥皂(包含所有的属性)PATCH /soaps/ID : 更改某个指定的肥皂(包含修改的属性)DELETE /soaps/ID : 删除某个指定的肥皂 那么如果我想取出某些特定的数据怎么做？ 过滤如果记录数量很多，我们需要对数据进行过滤。设计的 API 应该具有参数，可以返回过滤结果。可以设计冗余的参数。 1234567- ?limit =N : 限制返回N个数据- ?page =N ：返回第N页数据- ?offset =N ：从第N个数据开始- ?page =N&amp;perpage=M ：返回第N页数据和每页显示M个- ?type =something ：类别- ?sortby =something ：以何种属性排列- ?order =asc/desc ：排列顺序（升序/降序） 状态码用户向服务器请求数据后。服务器向用户返回状态码和信息，常见的有： 1234200 OK [GET]：服务器成功返回用户请求的数据，该操作是幂等的。201 CREATED [POST/PUT/PATCH]：用户新建或修改数据成功。202 Accepted [*]：表示一个请求已经进入后台排队（异步任务）204 NO CONTENT [DELETE]：用户删除数据成功。 12345678400 INVALID REQUEST [POST/PUT/PATCH]：用户发出的请求有错误，该操作是幂等的。401 Unauthorized[*]：表示用户没有权限（令牌、用户名、密码错误）。403 Forbidden [*]：表示用户得到授权（与401错误相对），但是访问是被禁止的。404 NOT FOUND [*]：用户发出的请求针对的是不存在的记录，该操作是幂等的。406 Not Acceptable [GET]：用户请求的格式不可得410 Gone [GET]：用户请求的资源被永久删除，且不会再得到的。422 Unprocesable entity [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。500 INTERNAL SERVER ERROR [*]：服务器发生错误，用户将无法判断发出的请求是否成功。 返回结果服务器向用户返回的结果应该符合规范123456GET /collection ：返回资源对象的列表（数组）GET /collection/resource ：返回单个资源对象POST /collection ：返回新生成的资源对象PUT /collection/resource ：返回完整的资源对象PATCH /collection/resource ：返回完整的资源对象DELETE /collection/resource ：返回一个空文档 超媒体API在非超媒体RESTful API的情景中，URL端点是服务器与客户端契约的一部分。这些端点必须让客户端事先知道，并且修改它们也意味着客户端可能再也无法与服务器通信了。超媒体API概念的运作跟人们的行为类似。通过请求API的根来获得一个URL的列表，这个列表里面的每一个URL都指向一个集合，并且提供了客户端可以理解的信息来描述每一个集合。是否为每一个资源提供ID并不重要（或者不是必须的），只要提供URL即可。 Github’s Hypermedia APIs 文档我们应该为 API 设计一个文档以便开发者使用。 API 文档尽量简洁明了 展示尽量完整，关键代码应该高亮显示 预期可能会发生的错误，解释在什么情况会会有错误。 引用 Principles of good RESTful API DesignREST best practices好API的设计原则RESTful设计指南 版权author : zhangrui授权 ：自由转载-非商用","categories":[],"tags":[{"name":"RESTful","slug":"RESTful","permalink":"https://ukhack.github.io/tags/RESTful/"},{"name":"编程学习","slug":"编程学习","permalink":"https://ukhack.github.io/tags/编程学习/"}],"keywords":[]},{"title":"第一次面试java研发实习","slug":"2016-10-15-擎天科技","date":"2016-10-14T16:00:00.000Z","updated":"2016-10-18T11:47:27.030Z","comments":true,"path":"2016/10/15/2016-10-15-擎天科技/","link":"","permalink":"https://ukhack.github.io/2016/10/15/2016-10-15-擎天科技/","excerpt":"","text":"擎天科技校招面试2016-10-15 周六 今天参与了擎天科技的校招面试。 本校的学生我所看到的只有三位同学。面试研发岗位的人挺多，大部分是南信工，南工大的学生。我这样的专科学历已然不够用了。 考官是挺随和的一个人，在面试开始时他让我大致介绍一下自己。我便说我来自哪儿，家在哪里吧啦吧啦的一堆乱七八糟的，现在想想真丢人，太紧张了 &gt;_&lt; 。 考官提的问题其实还是蛮简单的，大致是按照简历上写的问。或许是我太紧张了，所以就想到一出是一出，我的天呐，真的是紧张到一点策略都没有。比如考官没想过问sqlserver我自己偏要作大死提学的不错，还说学的很深。任课的高老师曾经是公司的项目总监，还出了一本书，教的东西真是难的可以，仍记得当时那段时间写sql语句写的要吐，但是确实学了有一年过去了。结果考官问left join,transaction,cusor都只记得个大概了QAQ 面试官还是蛮重视经验的，在开始不久时就询问我从什么时候学习Java,我告诉他学习了一年，并且强调一直在用Java。接着问我实际开发一个项目从什么时候开始。说真的，面试开发项目经验真的是蛮重要的！ 总结： 面试前一定要组织好语言！项目经验可以弥补“智商”的不足，一定要多多积累，在面试时才有东西可谈。","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"https://ukhack.github.io/tags/面试/"},{"name":"实习","slug":"实习","permalink":"https://ukhack.github.io/tags/实习/"},{"name":"生活","slug":"生活","permalink":"https://ukhack.github.io/tags/生活/"}],"keywords":[]},{"title":"Hi Git!","slug":"Hi-Git","date":"2016-10-10T16:00:00.000Z","updated":"2016-10-18T11:46:47.510Z","comments":true,"path":"2016/10/11/Hi-Git/","link":"","permalink":"https://ukhack.github.io/2016/10/11/Hi-Git/","excerpt":"","text":"Git 的起源 Git is a version control system that is used for software development and other version control tasks. As a distributed revision control system it is aimed at speed,data integrity, and support for distributed, non-linear workflows. Git was created by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development. Like the Linux kernel, Git is free software distributed under the terms of the GNU General Public License version 2. Wikipedia Git 是一个版本控制软件用于软件开发和其他的版本控制任务。git作为分布式版本控制系统，它是针对速度，数据完整性，并且支持它分布式的，非线性的工作流程。 Git 最初由林纳斯·托瓦兹（Linus Torvalds）在2005年创作。最初目的是为更好地管理Linux内核开发而设计。像linux内核一样,Git是以GNU2协议免费发布的。","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://ukhack.github.io/tags/Git/"},{"name":"Github","slug":"Github","permalink":"https://ukhack.github.io/tags/Github/"}],"keywords":[]},{"title":"搭建 Blog 笔记 (一)","slug":"myfirst","date":"2016-01-11T16:00:00.000Z","updated":"2016-10-17T08:29:55.034Z","comments":true,"path":"2016/01/12/myfirst/","link":"","permalink":"https://ukhack.github.io/2016/01/12/myfirst/","excerpt":"Git 的基本语法新建本地 repository12345#新建工作目录cd d:\\worksetmkdir gitone#初始化本地仓库git init","text":"Git 的基本语法新建本地 repository12345#新建工作目录cd d:\\worksetmkdir gitone#初始化本地仓库git init 新建文件夹​ Github 的格式严格要求需要 _layouts,_posts 文件夹 12345678910111213#_layouts 为页面的布局文件夹mkdir _layouts# _posts 为最新文章mkdir _posts#设置文件，主目录vim _config.yml#baseurl:/gitone#default.html 是默认格式vim _layout/default.html(内容下附)#文章内容格式必须为 yyyy-mm-dd-title(.html/.md)vim _posts/2016-01-12-myGithubPages.html(内容下附) 1234567891011&lt;!-- default.html --&gt;&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" /&gt; &lt;title&gt;&#123;&#123; page.title &#125;&#125;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &#123;&#123; content &#125;&#125; &lt;/body&gt; &lt;/html&gt; 12345678&lt;!--myGithubPages.html--&gt;---layout: defaulttitle: 你好，世界---&lt;h2&gt;&#123;&#123;page.title&#125;&#125;&lt;/h2&gt;&lt;p&gt;我的第一篇文章&lt;/p&gt;&lt;p&gt;&#123;&#123;page.date | date_to_string &#125;&#125; &lt;/p&gt; 提交至本地库​ Git中文件有三种状态：Untracked files、Changes to be committed、Changes not staged for commit 通过 git status 查看。只有 changes to be committed 状态才能被提交 1234#将所有文件加入待提交列表git add .#提交至本地 repositorygit commit -m 'I create a new page!' 提交至远程库​ 在此之前确保 Github 中的 repository 名为 username(ukhack).github.io 1git push origin master 打开 ukhack.github.io 查看情况","categories":[],"tags":[{"name":"Github","slug":"Github","permalink":"https://ukhack.github.io/tags/Github/"},{"name":"Blog","slug":"Blog","permalink":"https://ukhack.github.io/tags/Blog/"}],"keywords":[]}]}